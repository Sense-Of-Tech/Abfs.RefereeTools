@page "/teams"
@inject HttpClient Http
@using System.Linq;
@using SOT.Abfs.RefereeTools.Models;
<h1>@localizer["Teams"]</h1>

@if (displayTeams == null)
{
    <p><em>@localizer["Loading"]</em></p>
}
else
{
    <p>@localizer["TeamsIntroText"]. @localizer["LastUpdateText"] @teamsInformation.LastUpdate.ToShortDateString()</p>
    <div class="row">
        <div class="col-sm-6">
            <EditForm Model="@teamModelContext">
                <div class="form-group">
                    <div class="form-inline">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">@localizer["Search"]</div>
                            </div>
                            <InputText @bind-Value="teamModelContext.FilterText" class="form-control" />

                            <button @onclick="OnFilter" class="btn btn-outline-primary">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-sm-6">
            <EditForm Model="@feeModelContext">
                <div class="form-group">
                    <div class="form-inline">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">@localizer["Referee"]</div>
                            </div>
                            <InputSelect @bind-Value="feeModelContext.RefereeSelected" class="form-control">
                                @foreach (var item in refereesInformation.Referees.OrderBy(c => c.Firstname).ThenBy(c => c.Lastname))
                                    {
                                    <option value="@item.Id">@item.ToString()</option>
                                    }
                            </InputSelect>
                            <button @onclick="CalculateFee" class="btn btn-outline-primary">
                                <i class="fas fa-calculator"></i>
                            </button>
                        </div>


                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <table class="table table-striped table-hover table-responsive-sm table-sm">
        <thead>
            <tr>
                <th>@localizer["Div"]</th>
                <th>@localizer["TeamId"]</th>
                <th>@localizer["Team"]</th>
                <th>@localizer["Hall"]</th>
                <th>@localizer["Hour"]</th>
                <th>@localizer["Bloc"]</th>
                @if (displayTeams.FirstOrDefault()?.Difference != null)
                {
                    <th>@localizer["Diff"]</th>
                    <th>@localizer["Amount"]</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var team in displayTeams)
            {
                <tr>
                    <td>@team.Division</td>
                    <td>@team.Matricule</td>
                    <td>@team.ClubName</td>
                    <td>
                        <a href="halls/@team.HallId">
                            @team.Hall (@team.HallId.ToString("0000"))
                        </a>
                    </td>
                    <td>@team.Hour</td>
                    <td>@team.Bloc1-@team.Bloc2</td>
                    @if (team.Difference != null)
                    {
                        <td>@team.Difference.Value</td>
                        <td>@((team.Difference.Value * blocFee).ToString("0.00")) &euro;</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private TeamsInformation teamsInformation;
    private RefereesInformation refereesInformation;
    private FeeModelContext feeModelContext;
    private const double blocFee = 3.5;

    private Team[] displayTeams;
    private TeamModelContext teamModelContext = new TeamModelContext();


    private void CalculateFee()
    {
        foreach (var team in teamsInformation.Teams)
        {
            team.Difference = DifferenceBloc(team, feeModelContext);
        }
        OnFilter();
    }
    private int DifferenceBloc(Team team, FeeModelContext feeModel)
    {
        return DifferenceBloc(team.Bloc1, team.Bloc2, feeModel.Bloc1, feeModel.Bloc2);
    }

    private int DifferenceBloc(int hallBloc1, int hallBloc2, int refereeBloc1, int refereeBloc2)
    {
        return Math.Abs(hallBloc1 - refereeBloc1) + Math.Abs(hallBloc2 - refereeBloc2) + 1;
    }

    private void OnFilter()
    {
        Filter(teamModelContext.FilterText);
    }

    private void Filter(string searchValue)
    {
        if (string.IsNullOrEmpty(searchValue))
        {
            displayTeams = teamsInformation.Teams;
        }
        else
        {
            displayTeams = teamsInformation.Teams
                .Where(c => c.SearchString.Contains(searchValue, StringComparison.InvariantCultureIgnoreCase))
                .ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        teamsInformation = await Http.GetFromJsonAsync<SOT.Abfs.RefereeTools.Models.TeamsInformation>("data/teams.json");
        refereesInformation = await Http.GetFromJsonAsync<SOT.Abfs.RefereeTools.Models.RefereesInformation>("data/referees.json");
        teamsInformation.Teams = teamsInformation.Teams.OrderBy(c => c.Division).ThenBy(c => c.ClubName).ToArray();
        feeModelContext = new FeeModelContext
        {
            refereesInformation = refereesInformation
        };
        Filter(teamModelContext.FilterText);
    }

    public class TeamModelContext
    {
        public string FilterText { get; set; }
    }

    public class FeeModelContext
    {
        public RefereesInformation refereesInformation;


        private int refereeSelected;
        public int Bloc1 { get; set; }
        public int Bloc2 { get; set; }
        public string RefereeSelected
        {
            get => refereeSelected.ToString();
            set
            {
                refereeSelected = int.Parse(value);
                var referee = refereesInformation.Referees.FirstOrDefault(c => c.Id == refereeSelected);
                if (referee != null)
                {
                    Bloc1 = referee.Bloc1;
                    Bloc2 = referee.Bloc2;
                }
            }
        }
    }

}
