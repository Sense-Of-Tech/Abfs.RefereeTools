@page "/halls/{hallId:int}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Linq;
@using SOT.Abfs.RefereeTools.Models;


@if (!loaded)
{
    <p>@localizer["Loading"]</p>
}
else
{
    if (notFound)
    {
        <div class="jumbotron">
            <h1 class="display-4">@localizer["NotFoundTitle"]</h1>
            <p>
                @localizer["NotFoundText"]
            </p>
        </div>
    }
    else
    {
        <div class="jumbotron">
            <h1 class="display-4">@hallEntity.HallName (@hallId.ToString("0000"))</h1>
            <div class="row">
                <div class="col-7">
                    <p>

                        <dl class="row">
                            <dt class="col-sm-3">@localizer["Name"]</dt>
                            <dd class="col-sm-9">@hallEntity.HallName</dd>
                            <dt class="col-sm-3">@localizer["Street"]</dt>
                            <dd class="col-sm-9">@hallEntity.Street</dd>
                            <dt class="col-sm-3">@localizer["PostCode"]</dt>
                            <dd class="col-sm-9">@hallEntity.PostCode</dd>
                            <dt class="col-sm-3">@localizer["City"]</dt>
                            <dd class="col-sm-9">@hallEntity.City</dd>
                            <dt class="col-sm-3">@localizer["Bloc"]</dt>
                            <dd class="col-sm-9">@hallEntity.Bloc1-@hallEntity.Bloc2</dd>
                        </dl>
                    </p>
                </div>
                <div class="col-5">
                    <div id='myMap' style='width: 100%; height: 300px'></div>
                </div>
            </div>
        </div>

    }
}

@code {


    [Parameter]
    public int hallId { get; set; }

    private HallsInformation hallsInformation;
    private HallModel hallEntity { get; set; }
    private bool notFound { get; set; }
    private bool loaded { get; set; }


    protected override async Task OnInitializedAsync()
    {
        hallsInformation = await Http.GetFromJsonAsync<SOT.Abfs.RefereeTools.Models.HallsInformation>("data/halls.json");
        hallEntity = hallsInformation.Halls.FirstOrDefault(c => c.Id == hallId);
        notFound = hallEntity == null;
        loaded = true;
        var js = (IJSInProcessRuntime)JSRuntime;
        js.InvokeVoid("loadMapScenario", hallEntity.MapWhere);

    }
}
